import java.io.*;
import java.net.*;
import java.util.concurrent.*;

/**
 * Handles the Server side of the Server/Client System
 * with robust data processing capabilities.
 *
 * @author Yog Trivedi
 * @version December 5, 2024
 */
public class Server implements ServerInterface, Runnable {
    private ConcurrentHashMap<String, User> userDatabase; // Thread-safe storage
    private CopyOnWriteArrayList<User> activeUsers;       // For tracking active users
    private boolean isRunning = true;
    private ServerSocket serverSocket;

    public Server() {
        userDatabase = new ConcurrentHashMap<>();
        activeUsers = new CopyOnWriteArrayList<>();
    }

    public static void main(String[] args) {
        Server server = new Server();
        new Thread(server).start(); // Starts the server on a separate thread
    }

    @Override
    public void startServer(int port) {
        try {
            serverSocket = new ServerSocket(port);
            System.out.println("Server started on port " + port);

            while (isRunning) {
                Socket clientSocket = serverSocket.accept();
                new Thread(new ClientHandler(clientSocket, this)).start();
                System.out.println("Client connected");
            }
        } catch (IOException e) {
            if (isRunning) {
                System.err.println("Error in server: " + e.getMessage());
            } else {
                System.out.println("Server stopped.");
            }
        }
    }

    @Override
    public void stopServer() {
        isRunning = false;
        try {
            if (serverSocket != null && !serverSocket.isClosed()) {
                serverSocket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void handleRequest(Object request, ObjectOutputStream outStream) {
        try {
            if (request instanceof String) {
                String command = (String) request;
                if (command.startsWith("GET_USER:")) {
                    String username = command.substring(9);
                    User user = getUser(username);
                    outStream.writeObject(user);
                } else if (command.startsWith("ADD_USER:")) {
                    String[] parts = command.split(":");
                    if (parts.length >= 3) {
                        String username = parts[1];
                        String email = parts[2];
                        User user = new User(username, email);
                        addUser(user);
                        outStream.writeObject("User added successfully");
                    } else {
                        outStream.writeObject("Invalid ADD_USER command format");
                    }
                } else {
                    outStream.writeObject("Unknown command");
                }
            } else {
                outStream.writeObject("Invalid request format");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void addUser(User user) {
        if (user != null) {
            userDatabase.put(user.getUsername(), user);
        }
    }

    @Override
    public void removeUser(User user) {
        if (user != null) {
            userDatabase.remove(user.getUsername());
        }
    }

    @Override
    public User getUser(String username) {
        return userDatabase.get(username);
    }

    @Override
    public void run() {
        startServer(12345);
    }
}
